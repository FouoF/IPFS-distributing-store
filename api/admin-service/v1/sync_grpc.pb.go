// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: admin-service/v1/sync.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Sync_SyncDataFromEndpoint_FullMethodName = "/adminservice.v1.Sync/SyncDataFromEndpoint"
	Sync_GetDataByIdx_FullMethodName         = "/adminservice.v1.Sync/GetDataByIdx"
)

// SyncClient is the client API for Sync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The greeting service definition.
type SyncClient interface {
	SyncDataFromEndpoint(ctx context.Context, in *SyncDataFromEndpointRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
	GetDataByIdx(ctx context.Context, in *GetetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error)
}

type syncClient struct {
	cc grpc.ClientConnInterface
}

func NewSyncClient(cc grpc.ClientConnInterface) SyncClient {
	return &syncClient{cc}
}

func (c *syncClient) SyncDataFromEndpoint(ctx context.Context, in *SyncDataFromEndpointRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[0], Sync_SyncDataFromEndpoint_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SyncDataFromEndpointRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sync_SyncDataFromEndpointClient = grpc.ServerStreamingClient[FileChunk]

func (c *syncClient) GetDataByIdx(ctx context.Context, in *GetetDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FileChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Sync_ServiceDesc.Streams[1], Sync_GetDataByIdx_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetetDataRequest, FileChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sync_GetDataByIdxClient = grpc.ServerStreamingClient[FileChunk]

// SyncServer is the server API for Sync service.
// All implementations must embed UnimplementedSyncServer
// for forward compatibility.
//
// The greeting service definition.
type SyncServer interface {
	SyncDataFromEndpoint(*SyncDataFromEndpointRequest, grpc.ServerStreamingServer[FileChunk]) error
	GetDataByIdx(*GetetDataRequest, grpc.ServerStreamingServer[FileChunk]) error
	mustEmbedUnimplementedSyncServer()
}

// UnimplementedSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSyncServer struct{}

func (UnimplementedSyncServer) SyncDataFromEndpoint(*SyncDataFromEndpointRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method SyncDataFromEndpoint not implemented")
}
func (UnimplementedSyncServer) GetDataByIdx(*GetetDataRequest, grpc.ServerStreamingServer[FileChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetDataByIdx not implemented")
}
func (UnimplementedSyncServer) mustEmbedUnimplementedSyncServer() {}
func (UnimplementedSyncServer) testEmbeddedByValue()              {}

// UnsafeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SyncServer will
// result in compilation errors.
type UnsafeSyncServer interface {
	mustEmbedUnimplementedSyncServer()
}

func RegisterSyncServer(s grpc.ServiceRegistrar, srv SyncServer) {
	// If the following call pancis, it indicates UnimplementedSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Sync_ServiceDesc, srv)
}

func _Sync_SyncDataFromEndpoint_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncDataFromEndpointRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServer).SyncDataFromEndpoint(m, &grpc.GenericServerStream[SyncDataFromEndpointRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sync_SyncDataFromEndpointServer = grpc.ServerStreamingServer[FileChunk]

func _Sync_GetDataByIdx_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetetDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncServer).GetDataByIdx(m, &grpc.GenericServerStream[GetetDataRequest, FileChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Sync_GetDataByIdxServer = grpc.ServerStreamingServer[FileChunk]

// Sync_ServiceDesc is the grpc.ServiceDesc for Sync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "adminservice.v1.Sync",
	HandlerType: (*SyncServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncDataFromEndpoint",
			Handler:       _Sync_SyncDataFromEndpoint_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDataByIdx",
			Handler:       _Sync_GetDataByIdx_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin-service/v1/sync.proto",
}
